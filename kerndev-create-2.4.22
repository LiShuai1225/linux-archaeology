#!/bin/bash
set -e; set -o pipefail

# See http://stackoverflow.com/a/4774063.
script_dir=$(cd $(dirname $0); pwd -P)
source $script_dir/kerndev-shared.sh

check_commands dd losetup parted mkfs.ext3 extlinux mknod chroot sudo git mktemp debootstrap

linux_dir=${1:-$default_linux_dir}
check_kernel_dir "$linux_dir"
bzImage_path="$linux_dir/$bzImage_rel_path"
sysmap_path="$linux_dir/System.map"
configs_dir="$script_dir/configs"

[[ -f "$bzImage_path" ]] || fatal "Missing image at '$bzImage_path'."
[[ -f "$sysmap_path" ]] || fatal "Missing System.map at '$sysmap_path'."
[[ -f "$mbr_path" ]] || fatal "Missing MBR at $mbr_path, try installing the 'syslinux' package."

elevate $@

echo Creating image file...

mkdir -p "$images_dir"
rm -f "$image_path"
dd if=/dev/zero of="$image_path" bs=1M count=$image_size_mb 2>/dev/null

do_parted mklabel msdos
do_parted -a optimal mkpart primary ext3 '0%' '100%'
do_parted set 1 boot on

check_reload_loop

echo Mounting and formatting image...

loopdev=$(mount_image_loop)
partdev=${loopdev}p1
trap "unmount_image $loopdev" EXIT

# Use inode size 128, as otherwise mkfs (reasonably :) assumes we have kernel
# >2.6.10, and sets the inodes higher, which breaks for our poor 2.4.22 kernel.
mkfs.ext3 -qF -I 128 $partdev
mount_looped_image $partdev

echo Creating rootfs and installing boot code and kernel...

mkdir $mount_dir/boot
extlinux --install $mount_dir 2>/dev/null
cp "$configs_dir/syslinux.cfg" "$mount_dir"
cp "$bzImage_path" "$sysmap_path" "$mount_dir/boot"

push "$mount_dir"

echo Downloading and installing debian $debian_release rootfs...

# There is no specific x86_64 distribution, at least at the debian archive mirror.
debootstrap --arch=i386 $debian_release $mount_dir $debian_url >/dev/null
# Set a non-host hostname.
echo morgoth > $mount_dir/etc/hostname

echo Creating basic devices and setting up fstab and inittab...

cd dev
# Missing out this line results in no terminal :)
mknod ttyS0 c 4 64
mknod hda   b 3 0
mknod hda1  b 3 1
cd ..

echo "T0:23:respawn:/sbin/getty -L ttyS0 115200 vt100" >>etc/inittab

# Remove broken tty entries.
grep --invert-match '^[[:digit:]]:' etc/inittab > _inittab
mv _inittab etc/inittab

cat <<EOF >etc/fstab
/dev/hda1      /            ext3     defaults            1     1
proc           /proc        proc     nosuid,noexec,nodev 0     0
devpts         /dev/pts     devpts   gid=5,mode=620      0     0
EOF

# Requires CONFIG_FILTER and CONFIG_E1000. TODO: Add code in build to set
# critical config options.
cat <<EOF >etc/network/interfaces
auto eth0
allow-hotplug eth0
iface eth0 inet dhcp
EOF

pop
rm -rf "$tmpdir"

pop

unmount_image $loopdev

echo Installing MBR...
dd bs=440 count=1 conv=notrunc if="$mbr_path" of="$image_path" 2>/dev/null

echo Done!
